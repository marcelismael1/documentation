# Ansible
Ansible
https://www.udemy.com/course/learn-ansible/

------------------------------------------- 'Install Ansible' ----------------
sudo yum install epel-release    # add epel repo
yum install ansible

# Agentless (ssh, powershell connection)

-----------------------------' Inventory'---------------------------------------
# Since ansible is agentless, it connectst to targeted hosts via SSH or powershell
# and the list of hosts are saved in an inventory file, the default location of the
# inventory file is in
/etc/ansible/host

# inventory file form as below

==========================
# samble inventory file

server1.domain.com
server2.domain.com

# save domain list as groups
[mail]
server3.domain.com
server4.domain.com

[db]
server5.domain.com
server6.domain.com

[web]
server7.domain.com
server8.domain.com

# and we can create a group of groups
[all_servers:children]
mail
db
web
============================

# the inventory file takes additional parameters
ansible_connection=ssh/winrm/localhost   	# defines connection type
ansible_port=2/5986							# defines port number
ansible_user=root/administartor				# defines user
ansible_ssh_pass=mypassword					# defines ssh password

===============================
# sample ansible file
web2   ansible_host=server1.domain.com ansible_connection=ssh  ansible_user=root
db     ansible_host=server1.domain.com ansible_connection=ssh  ansible_ssh_pass=mypassword
mail   ansible_host=server1.domain.com ansible_connection=winrm ansible_user=administartor
web2   ansible_host=server1.domain.com ansible_connection=winrm

localhost ansible_connection=localhost
==================================

# test we create an inventory file with the following input
target1 ansible_host=192.168.0.220 ansible_ssh_pass=mypas
target1 ansible_host=192.168.0.66 ansible_ssh_pass=mypas

# to check the connection we run ping module with the inventory file
ansible target1 -m ping -i inventory.txt

####### NOTE:
# if it is the first time trying to connect to the target, with password we need to accept the key host
# so you need to connect to target 1 via ssh and accept the key. or disable this option <host_key_checking> from
/etc/ansible/ansible.cfg

------------------------------------------------ 'What is YAML' --------------------------------------
# yaml have diffrent types of data structures

# 1- Key Value Pair
Fruite: Apple
Meat: Chicken
Vegetables: carrot
Liquid: Water
# NOTES: you should add a spcae after the ":"

# 2 - Array or list
Fruits:
-   Orange
-   Apple
-   Banana

Vegetables:
-   Carrot
-   Tomato
-   ASdSAd
# NOTe: we should have the amount of spaces to have the same indent


# 3- Dictionary
Banana:
    Calories: 105
    Fat: 0.4 g
    Carbs: 27 g

Grapes:
    Calories: 62
    Fat: 0.3 g
    Carbs: 16 g
# Note: Keep indentation
=======================================
# Key value dictionary/list
Fruits:
    -   Banana:
          Calories: 105
          Fat: 0.4 g
          Carbs: 27g
    -   Grape:
          Calories: 62
          Fat: 0.4 g
          Carbs: 27g
===================================
# List of Dictionary
-  Color: Blue
   Model:
       Name: Corvette
       Model: 1995
   Transitions: Manual
   Price: 20,000$
-  Color: Red
   Model:
       Name: Corvette
       Model: 1995
   Transitions: Manual
   Price: 20,000$
-  Color: Black
   Model:
       Name: Corvette
       Model: 1998
   Transitions: Manual
   Price: 23,000$
=====================================
  ######### NOTE ##########

> Dictionary is Unordered
> List is Ordered


-------------------------------------- ' Ansible Playbooks' ------------------------------
# ansible playbook is aset of plays which represents a set of commands and tasks on a certain tasks
-
  name: Execute two commands on web_node1				 	# play name
  hosts: web_node1											# Targeted host (group of hosts) from inventory file
  tasks:													# List of tasks
    -
      name: Execute a date command                          # first task name
      command: date                                         # run a command
    -
      name: Execute a command to display hosts file			# second task name
      command: cat /etc/hosts	                            # run a command
    -
      name: run a script			                    	# task name
      script: test_scrip.sh	                            	# run a SCRIPT
    -
      name: install package		                            # task name
      yum: 		                                            # install package
      	  name: httpd	                                    # package name
      	  state: present
    -
      name: start service
      service:
         name: httpd
         state: started

# Modules are a tasks that can be excuted we can list all available modules
ansible-doc -l

# to run a playbook
ansible-playbook playbook.yml

-------------------------------------'run a playbook'--------------------------------
# there are two ways to run a playbook
ansible <host> -a <command>			#  to execute a command
ansible target -a "/sbin/reboot/"  -i <inventory file>
ansible all -a "/sbin/reboot/"      # all hosts

ansible target1 -a "/bin/cat /etc/passwd" -i inventory.txt




ansible <host> -m <module>    # to use a module like ping
ansible target1 -m ping -i <inventory file>




# the second way is to use ansible-playbook

ansible-playbook <playbook>

# to run aping test
==================
-
  name: test ping
  hosts: all
  tasks:
    - name: ping-test
      ping:
====================

ansible-package ping-test.yml -i inventory.txt

----------------------------------------'Modules' -------------------------
# Ansible have diffrent types of Modules and it can be classified as below:
# >> System: it is system level operations as below:
user, group, hostname, iptable, mak, mount, ping, systemd, service ...
# >> Commands: it is used to run command and scripts on the remote targets:
command, expect, raw, script, shell ....
# >> files: make changes on file:
acl, archive, copy, file, lineinfile, replace ....
# >> databases: to handle databases
mongodb, mssqlm mysql, postgresql, proxysql
# >> cloud: handles cloud applications\
amazon, atomic, azure, docker, google, openstack, .....
# >> windows: perform operations on windows machines:
win_copy, win_file, win_command, win_ping ....

***************** 'Command' *****************
# Command  is free_form module
free_form  #  this means that you dont have to assign values as paramaters just add you input

# command module examples
==================
-
  name: play1
  hosts: all
  tasks:
    - name: excute 'date' Command
      command: date

    - name: display file content
      command: cat /etc/resolv.conf

    - name: display file content
      command: cat resolv.conf chdir=/etc   # command parameter change directory

    - name: create folder
      command: mkdir /folder creats=/folder
====================

# some modules are not free_form like win_copy
    - name: copy file
      command: src=/source_file dest=/destination   # I have to add parameters

    - name: copy file
      command:
          src: /source_file
          dest: /destination


***************** 'script' *****************
==================
-
  name: play1
  hosts: all
  tasks:
    - name:run a script
      script: /some/local/script.sh -arg1 -arg2
==================

***************** 'service' *****************
# this is used to insure that the state of a service is as requested
# state = (started,stopped,restart)
==================
-
  name: start services in order
  hosts: target1
  tasks:
    - name:start database
      service: name=mysql state=started

    - name:start httpd
      service:
        name: httpd
        state: started
==================

============== 'Idempotency' ========
# an operation is idempontent if the result of the performing it once is exactly the same as the result of performing it repeatedly without any intervning applications
# this means that an if the playbook was run multiple time it will lead to the same result
# EXAMPLE:
***************** 'lineinfile' *****************
# this module adds a line to a file if this line is added it will do nothing this means lineinfile is idempontent
==================
-
  name:
  hosts: target1
  tasks:
    - lineinfile:
        path: /etc/resolv.conf
        line: 'nameserver 10.1.250.1
==================
# running this playbook several times will add the line one time

-----------------------------------------------------'Variables' -------------------------------------------------------
# variable can be defined in Ansible in many ways, and we can call them by '{{VAriable}}'
 1-  in the Playbooks
 ==============
 -
  name: Update nameserver entry into resolv.conf file on localhost
  hosts: localhost
  vars:
    car_model: "BMW M3"
    country_name: USA
    title: "Systems Engineer"
  tasks:
    -
      name: Print my car model
      command: echo "My car's model is {{ car_model }}"

    -
      name: Print my country
      command: echo "I live in the {‌{ country_name }}"

    -
      name: Print my title
      command: echo "I work as a {‌{ title }}"
 ==============
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2 - in the inventory file

localhost ansible_connection=localhost nameserver_ip=10.1.250.10

==========
-
  name: Update nameserver entry into resolv.conf file on localhost
  hosts: localhost
  tasks:
    -
      name: Update nameserver entry into resolv.conf file
      lineinfile:
        path: /etc/resolv.conf
        line: 'nameserver {{  nameserver_ip  }}'
==========
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

3- in a seperate file with the same name as the target1
# Sample var file - target1.yml
http_port: 8080
snmp_port: 161-162
inter_ip_range: 192.0.2.0

# and this data can be used in the Playbook


 ------------------
| Jinja2 Templating|
 ------------------
 # is the way to declare for variables between {{}}
 source: {{inter_ip_range}}                     # incorrect  (should be between '')
  source: '{{inter_ip_range}}'                  # correct
   source: something{{inter_ip_range}}somthing  # correct

-----------------------------------------------------'Conditions' -------------------------------------------------------
# this a way to set a condition to run a cetrain task and this by adding when to the tasks

============
-
  name: Execute a script on all web server nodes
  hosts: all_servers
  tasks:
    -
      service: name=mysql state=started
      when: ansible_host=='server4.company.com' or ansible_host=='server1.company.com'        # use variable names without Jinja2 Templating
============

# NOTES:
1- add when to set a Conditions
2- you can use or & and
3- use == for comaring

===========
-
  name: Am in an Adult or a Child
  hosts: localhost
  vars:
    age: 25
  tasks:
    -
      command: echo "I am a Child"
      when: age < 18

    -
      command: echo "I am an Adult"
      when: age >= 18
===========

***************** 'Register and Conditions' *****************
# this is a way to capture the output of a task in a parameter and use this parameter for a Conditions
# EXAMPLE

-
  name: Add name server entry if not already entered
  hosts: localhost
  tasks:
    - shell: cat /etc/resolv.conf       # run a task
      register: command_output          # get the output

    - shell: echo "nameserver 10.0.250.10" >> /etc/resolv.conf      # this is the 2nd task and it will be excuted in case ..
      when: command_output.stdout.find('10.0.250.10') == -1         # Get register value .stdout.find('10.0.250.10')
---------------------------------------------------------- 'Loops' --------------------------------------------------
