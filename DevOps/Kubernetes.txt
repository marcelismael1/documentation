#Kubernetes

https://linuxacademy.com/cp/courses/lesson/course/3515
# It is a container orchestrator tool that allow us to manage and scale containers easily

############################### building Kubernetes cluster ##################

# simple cluster consists of 3 node:
 ------			 --------        --------
|Master|		|Kub Node|		|Kub Node|
 ------			 --------        --------
 Docker			  Docker 	       Docker     # Container Engine
 Kubeadm          Kubeadm          Kubeadm    # Simplify cluster creation
 Kubelet          Kubelet          Kubelet    # An agent to manage the cluster
 Kubectl          Kubectl          Kubectl	  # Kubernetes command line
 Control 		                              # Controller for the Master Node
 ================================================================

-------------------------- INSTALL DOCKER on Ubuntu----------------------------
# get package key and add key to apt package manager
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# Add docker repo 
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
  
# When we add a new repo we update package listing
sudo apt-get update

# install docker version 18.06.1~ce~3-0~ubuntu for ubuntu
sudo apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu

# mark docker-ce package to remove it from auto upgrade list ( for full control)
sudo apt-mark hold docker-ce

-------------------------- INSTALL Kube tools on Ubuntu----------------------------
# Get k8 package key
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# add k8 repo to repo list
cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
# update
sudo apt-get update

# install kube tools (MUST BE SAME VERSION)
sudo apt-get install -y kubelet=1.15.7-00 kubeadm=1.15.7-00 kubectl=1.15.7-00  

# hold the version to prevent auto update
sudo apt-mark hold kubelet kubeadm kubectl

-------------------------- bootstrap k8 cluster ----------------------------
#On the Kube master node, initialize the cluster:
### NOOOOTEEEEL: master should have 2 vCPUs
sudo kubeadm init --pod-network-cidr=10.244.0.0/16  # initialize the cluster it produce information to configure kubectl and add nodes to cluster

# When it is done, set up the local kubeconfig:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Verify that the cluster is responsive and that Kubectl is working:

kubectl version

#You should get Server Version as well as Client Version. It should look something like this:
#>>Client Version: version.Info{Major:"1", Minor:"12", GitVersion:"v1.12.2", GitCommit:"17c77c7898218073f14c8d573582e8d2313dc740", GitTreeState:"clean", BuildDate:"2018-10-24T06:54:59Z", GoVersion:"go1.10.4", Compiler:"gc", Platform:"linux/amd64"}
#>> Server Version: version.Info{Major:"1", Minor:"12", GitVersion:"v1.12.2", GitCommit:"17c77c7898218073f14c8d573582e8d2313dc740", GitTreeState:"clean", BuildDate:"2018-10-24T06:43:59Z", GoVersion:"go1.10.4", Compiler:"gc", Platform:"linux/amd64"}

# on the nodes
#The kubeadm init command should output a kubeadm join command containing a token and hash. Copy that command and run it with sudo on both worker nodes. It should look something like this:
sudo kubeadm join $some_ip:6443 --token $some_token --discovery-token-ca-cert-hash $some_hash

#Verify that all nodes have successfully joined the cluster:
kubectl get nodes

#You should see all three of your nodes listed. It should look something like this:
NAME                      STATUS     ROLES    AGE     VERSION
wboyd1c.mylabserver.com   NotReady   master   5m17s   v1.12.2
wboyd2c.mylabserver.com   NotReady   <none>   53s     v1.12.2
wboyd3c.mylabserver.com   NotReady   <none>   31s     v1.12.2
#Note:* The nodes are expected to have a STATUS of NotReady at this point.

----------------------------- Configure Network ---------------------------

# K8 support a lot of network pluggins and we can configure networking by a lot of ways
# we will use FLANNEL which is a network configuration pluggin.

# 1) run the below codes in each node
echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf # put the value "net.bridge.bridge-nf-call-iptables=1" in /etc/sysctl.conf
sudo sysctl -p  # run sysctl to take effect immediately

# 2) run the below comand on Master node ONLY
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml
# this will laod YAML file from the link (-f option) and configure the network using flannel configuration
# 3) we can check the network is running by using 
kubectl get nodes   # we can see that all nodes are ready
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    Kubernetes Cluster is READY
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

------------------------------ 'PODS' ----------------------------------------

# Pods are the basic block in K8
# a pod can contain more that one container Usually 1
# each pod have an ip from  K8 network (10.244.0.0/16) in our example
                    
# to create a pod
 kubectl create -f <podfile.yml>

 # the yml file looks something like this

 apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx

# to view the running pods

kubectl get pods
kubectl get pods -o wide  # more details


# view the pods that related to system 
kubectl get pods -n kube-system

# pods are seperated by name space and to use this we do
kubectl get pods --all-namespaces

# get details about a pod (inculding event list)
kubectl describe pod <pod_name>
kubectl describe pod nginx

# describe a pod running in a namespace
kubectl describe pod <pod_name> -n <namespace>

# NOTE:   we can get details about different K8 objects like services by describe

# to delete a pod

kubectl delete pod <pod_name>
kubectl delete pod nginx

------------------------------ 'Clustering and Nodes' -------------------
# previously we build a cluster and now we have a master and 2 worker nodes 
# the pods will run on worker nodes

# simple cluster consists of 3 node:
 ------			 --------        --------
|Master|		|.Worker.|		|.Worker.|
 ------			 --------        --------
 API			  Pod  	       	   Pod
 Control          Pod          	   Pod
 Panel

# get list of nodes
kubectl get nodes

# get node details
kubectl describe node $node_name

 ---------------------------------- 'Networking in Kubernetes' -------------------

 # K8 have all the pods connected to virtual network in a way that even if  pods are on different nodes 
 # they can communicate using the pods ip address

 # there are alot of plugins that can do that, and Flannel is one of them


# we can test that by creating several pods and try to excute some commands from one of them towards the others
# using thier ip 
# lets suppose we have busybox that can run ;'curl' and nginx pod

kubectl exec <pod_name> -- <command>

kubectl exec busybox -- curl <nginx_ip>